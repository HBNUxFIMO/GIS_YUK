# -*- coding: utf-8 -*-
"""VN Good의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PpUKK3O070zr99c-nTa5scgiqlXKObo7
"""

from __future__ import print_function
from osgeo import gdal

print(gdal.__version__)
print(gdal)

dataset = gdal.Open('output_eee.tif', gdal.GA_ReadOnly)

print(dataset)

num_bands = dataset.RasterCount
print("Number of bands in image: {n}\n".format(n=num_bands))

rows = dataset.RasterYSize
cols = dataset.RasterXSize
print("Image size is: {r} rows x {c} columns\n".format(n=rows), format(n=cols))

desc = dataset.GetDescription()
metadata = dataset.GetMetadata()

print("Raster description: {desc}\n".format(desc=desc))
print("Raster metadata: {meta}\n".format(meta=metadata))
print()

driver = dataset.GetDriver()
print("Raster driver: {driver}\n".format(driver=driver.ShortName))

blue = dataset.GetRasterBand(1)

print(blue)

datatype = blue.DataType
print("Band datatype: {dt}".format(dt=datatype))

datatype_name = gdal.GetDataTypeName(blue.datatype)
print("Band datatype: {dt}".format(dt=datatype_name))

bytes = gdal.GetDataTypeSize(blue.datatype)
print("Band size: {b} bytes".format(b=bytes))

band_max, band_min, band_mean, band_stddev = blue.GetStatistics(0,1)
print("Band range: {minimum} - {maximum}".format(maximum=band_max, minimum=band_min))
print("Band mean: {mean}".format(mean=band_mean))
print("Band stddev: {stddev}".format(stddev=band_stddev))

blue_data = blue.ReadAsArray()

import  numpy
print(numpy.__version__)

import numpy as np
print(np.__version__)

image = np.zeros((dataset.RasterYSize, dataset.RasterXSize, dataset.RasterCount))
for b in range(dataset.RasterCount):
  band = dataset.GetRasterBand(b+1)

  image[:, :, b] = band.ReadAsArray()

print(image)
print(image.dtype)

print('Green band mean: {r}'.format(r=image[:,:,3].mean()))
print('NIR band mean: {nir}'.format(nir=image[:,:,5].mean()))

b_green = 3
b_nir = 5

ndwi = (image[:,:,b_green] - image[:,:,b_nir]) / (image[:,:,b_green] + image[:,:,b_nir])

print(ndwi)
print(ndwi.max())